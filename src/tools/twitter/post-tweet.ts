import { Scraper } from "agent-twitter-client";
import path from "path";

/** TODO Cookies: implement login via cookies or just login once.
 * Probably not good look for the account if we keep logging in over and over.
 */
import fs from "fs";
const COOKIE_PATH = path.join(process.cwd(), "twitter-cookies.json");

export default async function postTweet(
  tweet: string,
  txHash: `0x${string}` | null
) {
  const scraper = new Scraper();
  const isLoggedIn = await scraper.isLoggedIn();

  if (!isLoggedIn) {
    await loginWithCredentials(scraper);
  }

  return await postTweetWithReceiptReply(scraper, tweet, txHash);
}

/**
 * Takes the tweet content and the tx hash of the trade and posts the tweet.
 * It posts 1-2 tweets:
 * 1. The tweet containing the commentary generated by the "intern" agent.
 * 2. If a transaction was executed, it will post a reply to the tweet with the Abscan link.
 * If it does multiple trades, I hope this fn doesn't break... hmm
 */
async function postTweetWithReceiptReply(
  scraper: Scraper,
  tweet: string,
  txHash: `0x${string}` | null
) {
  const tweetOne = await scraper.sendTweet(tweet);

  if (!txHash) {
    return tweetOne;
  }

  console.log(tweetOne);

  const tweetOneData = await tweetOne.json();

  console.log(tweetOneData?.data?.create_tweet);

  // Post Abscan link to the tweet as a reply
  const tweetTwo = await scraper.sendTweet(
    `https://abscan.org/tx/${txHash}`,
    tweetOneData?.data?.create_tweet?.tweet_results?.result?.rest_id
  );
  return tweetTwo;
}

async function loginWithCredentials(scraper: Scraper) {
  await scraper.login(
    process.env.TWITTER_USERNAME!,
    process.env.TWITTER_PASSWORD!
  );
}
